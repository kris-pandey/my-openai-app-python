#
# Snyk. The results are then uploaded to GitHub Security Code Scanning
#

name: Python OpenAI Application vulnerability scan with Snyk
run-name: Python OpenAI App vulnerability scan with Snyk by @${{ github.actor }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  #schedule:
  #  - cron: '33 9 * * 3'

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    #- name: Build a Docker image
    #  run: docker build -t your/image-to-test .
    #  continue-on-error: true
    #- name: Run Snyk to check Docker image for vulnerabilities
      # Snyk can be used to break the build when it detects vulnerabilities.
      # In this case we want to upload the issues to GitHub Code Scanning
    # continue-on-error: true
    #  uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
    #with:
    #    image: your/image-to-test
    #    args: --file=Dockerfile
    - name: Run Snyk to check for code (python) vulnerabilities
      uses: snyk/actions/python@master
      continue-on-error: true # To make sure that SARIF upload gets called
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
          args: --sarif-file-output=snyk.sarif
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
